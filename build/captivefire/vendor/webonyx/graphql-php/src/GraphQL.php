<?php  declare(strict_types=1);namespace GraphQL;use GraphQL\Error\Error;use GraphQL\Executor\ExecutionResult;use GraphQL\Executor\Executor;use GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter;use GraphQL\Executor\Promise\Promise;use GraphQL\Executor\Promise\PromiseAdapter;use GraphQL\Executor\ReferenceExecutor;use GraphQL\Experimental\Executor\CoroutineExecutor;use GraphQL\Language\AST\DocumentNode;use GraphQL\Language\Parser;use GraphQL\Language\Source;use GraphQL\Type\Definition\Directive;use GraphQL\Type\Definition\Type;use GraphQL\Type\Schema as SchemaType;use GraphQL\Validator\DocumentValidator;use GraphQL\Validator\Rules\QueryComplexity;use GraphQL\Validator\Rules\ValidationRule;use function array_values;use function trigger_error;use const E_USER_DEPRECATED;class GraphQL{public static function executeQuery(SchemaType $schema,$source,$rootValue=null,$context=null,$variableValues=null,?string $operationName=null,?callable $fieldResolver=null,?array $validationRules=null):ExecutionResult{$promiseAdapter=new SyncPromiseAdapter();$promise=self::promiseToExecute($promiseAdapter,$schema,$source,$rootValue,$context,$variableValues,$operationName,$fieldResolver,$validationRules);return $promiseAdapter->wait($promise);}public static function promiseToExecute(PromiseAdapter $promiseAdapter,SchemaType $schema,$source,$rootValue=null,$context=null,$variableValues=null,?string $operationName=null,?callable $fieldResolver=null,?array $validationRules=null):Promise{try{if($source instanceof DocumentNode){$documentNode=$source;}else{$documentNode=Parser::parse(new Source($source?:'','GraphQL'));}if(empty($validationRules)){$queryComplexity=DocumentValidator::getRule(QueryComplexity::class);$queryComplexity->setRawVariableValues($variableValues);}else{foreach($validationRules as $rule){if(!($rule instanceof QueryComplexity)){continue;}$rule->setRawVariableValues($variableValues);}}$validationErrors=DocumentValidator::validate($schema,$documentNode,$validationRules);if(!empty($validationErrors)){return $promiseAdapter->createFulfilled(new ExecutionResult(null,$validationErrors));}return Executor::promiseToExecute($promiseAdapter,$schema,$documentNode,$rootValue,$context,$variableValues,$operationName,$fieldResolver);}catch(Error $e){return $promiseAdapter->createFulfilled(new ExecutionResult(null,[$e]));}}public static function execute(SchemaType $schema,$source,$rootValue=null,$contextValue=null,$variableValues=null,?string $operationName=null){trigger_error(__METHOD__.' is deprecated, use GraphQL::executeQuery()->toArray() as a quick replacement',E_USER_DEPRECATED);$promiseAdapter=Executor::getPromiseAdapter();$result=self::promiseToExecute($promiseAdapter,$schema,$source,$rootValue,$contextValue,$variableValues,$operationName);if($promiseAdapter instanceof SyncPromiseAdapter){$result=$promiseAdapter->wait($result)->toArray();}else{$result=$result->then(static function(ExecutionResult $r){return $r->toArray();});}return $result;}public static function executeAndReturnResult(SchemaType $schema,$source,$rootValue=null,$contextValue=null,$variableValues=null,?string $operationName=null){trigger_error(__METHOD__.' is deprecated, use GraphQL::executeQuery() as a quick replacement',E_USER_DEPRECATED);$promiseAdapter=Executor::getPromiseAdapter();$result=self::promiseToExecute($promiseAdapter,$schema,$source,$rootValue,$contextValue,$variableValues,$operationName);if($promiseAdapter instanceof SyncPromiseAdapter){$result=$promiseAdapter->wait($result);}return $result;}public static function getStandardDirectives():array{return array_values(Directive::getInternalDirectives());}public static function getStandardTypes():array{return array_values(Type::getStandardTypes());}public static function overrideStandardTypes(array $types){Type::overrideStandardTypes($types);}public static function getStandardValidationRules():array{return array_values(DocumentValidator::defaultRules());}public static function setDefaultFieldResolver(callable $fn):void{Executor::setDefaultFieldResolver($fn);}public static function setPromiseAdapter(?PromiseAdapter $promiseAdapter=null):void{Executor::setPromiseAdapter($promiseAdapter);}public static function useExperimentalExecutor(){Executor::setImplementationFactory([CoroutineExecutor::class,'create']);}public static function useReferenceExecutor(){Executor::setImplementationFactory([ReferenceExecutor::class,'create']);}public static function getInternalDirectives():array{return self::getStandardDirectives();}}