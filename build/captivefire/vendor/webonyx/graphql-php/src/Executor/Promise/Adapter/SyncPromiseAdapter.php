<?php  declare(strict_types=1);namespace GraphQL\Executor\Promise\Adapter;use Exception;use GraphQL\Deferred;use GraphQL\Error\InvariantViolation;use GraphQL\Executor\ExecutionResult;use GraphQL\Executor\Promise\Promise;use GraphQL\Executor\Promise\PromiseAdapter;use GraphQL\Utils\Utils;use Throwable;use function count;class SyncPromiseAdapter implements PromiseAdapter{public function isThenable($value){return $value instanceof Deferred;}public function convertThenable($thenable){if(!$thenable instanceof Deferred){throw new InvariantViolation('Expected instance of GraphQL\Deferred, got '.Utils::printSafe($thenable));}return new Promise($thenable->promise,$this);}public function then(Promise $promise,?callable $onFulfilled=null,?callable $onRejected=null){$adoptedPromise=$promise->adoptedPromise;return new Promise($adoptedPromise->then($onFulfilled,$onRejected),$this);}public function create(callable $resolver){$promise=new SyncPromise();try{$resolver([$promise,'resolve',],[$promise,'reject',]);}catch(Exception $e){$promise->reject($e);}catch(Throwable $e){$promise->reject($e);}return new Promise($promise,$this);}public function createFulfilled($value=null){$promise=new SyncPromise();return new Promise($promise->resolve($value),$this);}public function createRejected($reason){$promise=new SyncPromise();return new Promise($promise->reject($reason),$this);}public function all(array $promisesOrValues){$all=new SyncPromise();$total=count($promisesOrValues);$count=0;$result=[];foreach($promisesOrValues as $index =>$promiseOrValue){if($promiseOrValue instanceof Promise){$result[$index]=null;$promiseOrValue->then(static function($value)use($index,&$count,$total,&$result,$all){$result[$index]=$value;$count++;if($count<$total){return;}$all->resolve($result);},[$all,'reject']);}else{$result[$index]=$promiseOrValue;$count++;}}if($count ===$total){$all->resolve($result);}return new Promise($all,$this);}public function wait(Promise $promise){$this->beforeWait($promise);$dfdQueue=Deferred::getQueue();$promiseQueue=SyncPromise::getQueue();while($promise->adoptedPromise->state ===SyncPromise::PENDING &&!($dfdQueue->isEmpty()&&$promiseQueue->isEmpty())){Deferred::runQueue();SyncPromise::runQueue();$this->onWait($promise);}$syncPromise=$promise->adoptedPromise;if($syncPromise->state ===SyncPromise::FULFILLED){return $syncPromise->result;}if($syncPromise->state ===SyncPromise::REJECTED){throw $syncPromise->result;}throw new InvariantViolation('Could not resolve promise');}protected function beforeWait(Promise $promise){}protected function onWait(Promise $promise){}}