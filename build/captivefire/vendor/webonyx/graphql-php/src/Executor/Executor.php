<?php  declare(strict_types=1);namespace GraphQL\Executor;use ArrayAccess;use Closure;use GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter;use GraphQL\Executor\Promise\Promise;use GraphQL\Executor\Promise\PromiseAdapter;use GraphQL\Language\AST\DocumentNode;use GraphQL\Type\Definition\ResolveInfo;use GraphQL\Type\Schema;use function is_array;use function is_object;class Executor{private static $defaultFieldResolver=[self::class,'defaultFieldResolver'];private static $defaultPromiseAdapter;private static $implementationFactory=[ReferenceExecutor::class,'create'];public static function getDefaultFieldResolver():callable{return self::$defaultFieldResolver;}public static function setDefaultFieldResolver(callable $fieldResolver){self::$defaultFieldResolver=$fieldResolver;}public static function getPromiseAdapter():PromiseAdapter{return self::$defaultPromiseAdapter?:(self::$defaultPromiseAdapter=new SyncPromiseAdapter());}public static function setPromiseAdapter(?PromiseAdapter $defaultPromiseAdapter=null){self::$defaultPromiseAdapter=$defaultPromiseAdapter;}public static function getImplementationFactory():callable{return self::$implementationFactory;}public static function setImplementationFactory(callable $implementationFactory){self::$implementationFactory=$implementationFactory;}public static function execute(Schema $schema,DocumentNode $documentNode,$rootValue=null,$contextValue=null,$variableValues=null,$operationName=null,?callable $fieldResolver=null){$promiseAdapter=static::getPromiseAdapter();$result=static::promiseToExecute($promiseAdapter,$schema,$documentNode,$rootValue,$contextValue,$variableValues,$operationName,$fieldResolver);if($promiseAdapter instanceof SyncPromiseAdapter){$result=$promiseAdapter->wait($result);}return $result;}public static function promiseToExecute(PromiseAdapter $promiseAdapter,Schema $schema,DocumentNode $documentNode,$rootValue=null,$contextValue=null,$variableValues=null,$operationName=null,?callable $fieldResolver=null){$factory=self::$implementationFactory;$executor=$factory($promiseAdapter,$schema,$documentNode,$rootValue,$contextValue,$variableValues,$operationName,$fieldResolver?:self::$defaultFieldResolver);return $executor->doExecute();}public static function defaultFieldResolver($source,$args,$context,ResolveInfo $info){$fieldName=$info->fieldName;$property=null;if(is_array($source)||$source instanceof ArrayAccess){if(isset($source[$fieldName])){$property=$source[$fieldName];}}elseif(is_object($source)){if(isset($source->{$fieldName})){$property=$source->{$fieldName};}}return $property instanceof Closure?$property($source,$args,$context,$info):$property;}}