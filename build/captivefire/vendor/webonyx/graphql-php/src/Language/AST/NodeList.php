<?php  declare(strict_types=1);namespace GraphQL\Language\AST;use ArrayAccess;use Countable;use Generator;use GraphQL\Utils\AST;use IteratorAggregate;use function array_merge;use function array_splice;use function count;use function is_array;class NodeList implements ArrayAccess,IteratorAggregate,Countable{private $nodes;public static function create(array $nodes){return new static($nodes);}public function __construct(array $nodes){$this->nodes=$nodes;}public function offsetExists($offset){return isset($this->nodes[$offset]);}public function offsetGet($offset){$item=$this->nodes[$offset];if(is_array($item)&&isset($item['kind'])){$this->nodes[$offset]=$item=AST::fromArray($item);}return $item;}public function offsetSet($offset,$value){if(is_array($value)&&isset($value['kind'])){$value=AST::fromArray($value);}$this->nodes[$offset]=$value;}public function offsetUnset($offset){unset($this->nodes[$offset]);}public function splice($offset,$length,$replacement=null){return new NodeList(array_splice($this->nodes,$offset,$length,$replacement));}public function merge($list){if($list instanceof self){$list=$list->nodes;}return new NodeList(array_merge($this->nodes,$list));}public function getIterator(){foreach($this->nodes as $key =>$_){yield $this->offsetGet($key);}}public function count(){return count($this->nodes);}}