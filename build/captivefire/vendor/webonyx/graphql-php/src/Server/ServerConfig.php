<?php  declare(strict_types=1);namespace GraphQL\Server;use GraphQL\Error\InvariantViolation;use GraphQL\Executor\Promise\PromiseAdapter;use GraphQL\Type\Schema;use GraphQL\Utils\Utils;use GraphQL\Validator\Rules\ValidationRule;use function is_array;use function is_callable;use function method_exists;use function sprintf;use function ucfirst;class ServerConfig{public static function create(array $config=[]){$instance=new static();foreach($config as $key =>$value){$method='set'.ucfirst($key);if(!method_exists($instance,$method)){throw new InvariantViolation(sprintf('Unknown server config option "%s"',$key));}$instance->$method($value);}return $instance;}private $schema;private $context;private $rootValue;private $errorFormatter;private $errorsHandler;private $debug=false;private $queryBatching=false;private $validationRules;private $fieldResolver;private $promiseAdapter;private $persistentQueryLoader;public function setSchema(Schema $schema){$this->schema=$schema;return $this;}public function setContext($context){$this->context=$context;return $this;}public function setRootValue($rootValue){$this->rootValue=$rootValue;return $this;}public function setErrorFormatter(callable $errorFormatter){$this->errorFormatter=$errorFormatter;return $this;}public function setErrorsHandler(callable $handler){$this->errorsHandler=$handler;return $this;}public function setValidationRules($validationRules){if(!is_callable($validationRules)&&!is_array($validationRules)&&$validationRules !==null){throw new InvariantViolation('Server config expects array of validation rules or callable returning such array, but got '.Utils::printSafe($validationRules));}$this->validationRules=$validationRules;return $this;}public function setFieldResolver(callable $fieldResolver){$this->fieldResolver=$fieldResolver;return $this;}public function setPersistentQueryLoader(callable $persistentQueryLoader){$this->persistentQueryLoader=$persistentQueryLoader;return $this;}public function setDebug($set=true){$this->debug=$set;return $this;}public function setQueryBatching(bool $enableBatching):self{$this->queryBatching=$enableBatching;return $this;}public function setPromiseAdapter(PromiseAdapter $promiseAdapter){$this->promiseAdapter=$promiseAdapter;return $this;}public function getContext(){return $this->context;}public function getRootValue(){return $this->rootValue;}public function getSchema(){return $this->schema;}public function getErrorFormatter(){return $this->errorFormatter;}public function getErrorsHandler(){return $this->errorsHandler;}public function getPromiseAdapter(){return $this->promiseAdapter;}public function getValidationRules(){return $this->validationRules;}public function getFieldResolver(){return $this->fieldResolver;}public function getPersistentQueryLoader(){return $this->persistentQueryLoader;}public function getDebug(){return $this->debug;}public function getQueryBatching(){return $this->queryBatching;}}