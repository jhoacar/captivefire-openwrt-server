<?php  declare(strict_types=1);namespace GraphQL\Validator\Rules;use GraphQL\Error\Error;use GraphQL\Language\AST\FieldNode;use GraphQL\Language\AST\NodeKind;use GraphQL\Type\Definition\InterfaceType;use GraphQL\Type\Definition\ObjectType;use GraphQL\Type\Definition\Type;use GraphQL\Type\Schema;use GraphQL\Utils\Utils;use GraphQL\Validator\ValidationContext;use function array_keys;use function array_merge;use function arsort;use function sprintf;class FieldsOnCorrectType extends ValidationRule{public function getVisitor(ValidationContext $context){return[NodeKind::FIELD =>function(FieldNode $node)use($context){$type=$context->getParentType();if(!$type){return;}$fieldDef=$context->getFieldDef();if($fieldDef){return;}$schema=$context->getSchema();$fieldName=$node->name->value;$suggestedTypeNames=$this->getSuggestedTypeNames($schema,$type,$fieldName);$suggestedFieldNames=$suggestedTypeNames?[]:$this->getSuggestedFieldNames($schema,$type,$fieldName);$context->reportError(new Error(static::undefinedFieldMessage($node->name->value,$type->name,$suggestedTypeNames,$suggestedFieldNames),[$node]));},];}private function getSuggestedTypeNames(Schema $schema,$type,$fieldName){if(Type::isAbstractType($type)){$suggestedObjectTypes=[];$interfaceUsageCount=[];foreach($schema->getPossibleTypes($type)as $possibleType){$fields=$possibleType->getFields();if(!isset($fields[$fieldName])){continue;}$suggestedObjectTypes[]=$possibleType->name;foreach($possibleType->getInterfaces()as $possibleInterface){$fields=$possibleInterface->getFields();if(!isset($fields[$fieldName])){continue;}$interfaceUsageCount[$possibleInterface->name]=!isset($interfaceUsageCount[$possibleInterface->name])?0:$interfaceUsageCount[$possibleInterface->name]+1;}}arsort($interfaceUsageCount);$suggestedInterfaceTypes=array_keys($interfaceUsageCount);return array_merge($suggestedInterfaceTypes,$suggestedObjectTypes);}return[];}private function getSuggestedFieldNames(Schema $schema,$type,$fieldName){if($type instanceof ObjectType ||$type instanceof InterfaceType){$possibleFieldNames=array_keys($type->getFields());return Utils::suggestionList($fieldName,$possibleFieldNames);}return[];}public static function undefinedFieldMessage($fieldName,$type,array $suggestedTypeNames,array $suggestedFieldNames){$message=sprintf('Cannot query field "%s" on type "%s".',$fieldName,$type);if($suggestedTypeNames){$suggestions=Utils::quotedOrList($suggestedTypeNames);$message .=sprintf(' Did you mean to use an inline fragment on %s?',$suggestions);}elseif(!empty($suggestedFieldNames)){$suggestions=Utils::quotedOrList($suggestedFieldNames);$message .=sprintf(' Did you mean %s?',$suggestions);}return $message;}}