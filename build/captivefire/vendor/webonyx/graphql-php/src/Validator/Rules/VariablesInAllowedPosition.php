<?php  declare(strict_types=1);namespace GraphQL\Validator\Rules;use GraphQL\Error\Error;use GraphQL\Language\AST\NodeKind;use GraphQL\Language\AST\OperationDefinitionNode;use GraphQL\Language\AST\VariableDefinitionNode;use GraphQL\Type\Definition\ListOfType;use GraphQL\Type\Definition\NonNull;use GraphQL\Utils\TypeComparators;use GraphQL\Utils\TypeInfo;use GraphQL\Validator\ValidationContext;use function sprintf;class VariablesInAllowedPosition extends ValidationRule{public $varDefMap;public function getVisitor(ValidationContext $context){return[NodeKind::OPERATION_DEFINITION =>['enter' =>function(){$this->varDefMap=[];},'leave' =>function(OperationDefinitionNode $operation)use($context){$usages=$context->getRecursiveVariableUsages($operation);foreach($usages as $usage){$node=$usage['node'];$type=$usage['type'];$varName=$node->name->value;$varDef=$this->varDefMap[$varName]??null;if($varDef ===null ||$type ===null){continue;}$schema=$context->getSchema();$varType=TypeInfo::typeFromAST($schema,$varDef->type);if(!$varType ||TypeComparators::isTypeSubTypeOf($schema,$this->effectiveType($varType,$varDef),$type)){continue;}$context->reportError(new Error(self::badVarPosMessage($varName,$varType,$type),[$varDef,$node]));}},],NodeKind::VARIABLE_DEFINITION =>function(VariableDefinitionNode $varDefNode){$this->varDefMap[$varDefNode->variable->name->value]=$varDefNode;},];}private function effectiveType($varType,$varDef){return!$varDef->defaultValue ||$varType instanceof NonNull?$varType:new NonNull($varType);}public static function badVarPosMessage($varName,$varType,$expectedType){return sprintf('Variable "$%s" of type "%s" used in position expecting type "%s".',$varName,$varType,$expectedType);}private function varTypeAllowedForType($varType,$expectedType){if($expectedType instanceof NonNull){if($varType instanceof NonNull){return $this->varTypeAllowedForType($varType->getWrappedType(),$expectedType->getWrappedType());}return false;}if($varType instanceof NonNull){return $this->varTypeAllowedForType($varType->getWrappedType(),$expectedType);}if($varType instanceof ListOfType &&$expectedType instanceof ListOfType){return $this->varTypeAllowedForType($varType->getWrappedType(),$expectedType->getWrappedType());}return $varType ===$expectedType;}}