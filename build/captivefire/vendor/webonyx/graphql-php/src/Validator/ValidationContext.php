<?php  declare(strict_types=1);namespace GraphQL\Validator;use GraphQL\Error\Error;use GraphQL\Language\AST\DocumentNode;use GraphQL\Language\AST\FragmentDefinitionNode;use GraphQL\Language\AST\FragmentSpreadNode;use GraphQL\Language\AST\HasSelectionSet;use GraphQL\Language\AST\NodeKind;use GraphQL\Language\AST\OperationDefinitionNode;use GraphQL\Language\AST\SelectionSetNode;use GraphQL\Language\AST\VariableNode;use GraphQL\Language\Visitor;use GraphQL\Type\Definition\FieldDefinition;use GraphQL\Type\Definition\InputType;use GraphQL\Type\Definition\Type;use GraphQL\Type\Schema;use GraphQL\Utils\TypeInfo;use SplObjectStorage;use function array_pop;use function call_user_func_array;use function count;class ValidationContext{private $schema;private $ast;private $typeInfo;private $errors;private $fragments;private $fragmentSpreads;private $recursivelyReferencedFragments;private $variableUsages;private $recursiveVariableUsages;public function __construct(Schema $schema,DocumentNode $ast,TypeInfo $typeInfo){$this->schema=$schema;$this->ast=$ast;$this->typeInfo=$typeInfo;$this->errors=[];$this->fragmentSpreads=new SplObjectStorage();$this->recursivelyReferencedFragments=new SplObjectStorage();$this->variableUsages=new SplObjectStorage();$this->recursiveVariableUsages=new SplObjectStorage();}public function reportError(Error $error){$this->errors[]=$error;}public function getErrors(){return $this->errors;}public function getSchema(){return $this->schema;}public function getRecursiveVariableUsages(OperationDefinitionNode $operation){$usages=$this->recursiveVariableUsages[$operation]??null;if($usages ===null){$usages=$this->getVariableUsages($operation);$fragments=$this->getRecursivelyReferencedFragments($operation);$tmp=[$usages];foreach($fragments as $i =>$fragment){$tmp[]=$this->getVariableUsages($fragments[$i]);}$usages=call_user_func_array('array_merge',$tmp);$this->recursiveVariableUsages[$operation]=$usages;}return $usages;}private function getVariableUsages(HasSelectionSet $node){$usages=$this->variableUsages[$node]??null;if($usages ===null){$newUsages=[];$typeInfo=new TypeInfo($this->schema);Visitor::visit($node,Visitor::visitWithTypeInfo($typeInfo,[NodeKind::VARIABLE_DEFINITION =>static function(){return false;},NodeKind::VARIABLE =>static function(VariableNode $variable)use(&$newUsages,$typeInfo){$newUsages[]=['node' =>$variable,'type' =>$typeInfo->getInputType()];},]));$usages=$newUsages;$this->variableUsages[$node]=$usages;}return $usages;}public function getRecursivelyReferencedFragments(OperationDefinitionNode $operation){$fragments=$this->recursivelyReferencedFragments[$operation]??null;if($fragments ===null){$fragments=[];$collectedNames=[];$nodesToVisit=[$operation];while(!empty($nodesToVisit)){$node=array_pop($nodesToVisit);$spreads=$this->getFragmentSpreads($node);foreach($spreads as $spread){$fragName=$spread->name->value;if(!empty($collectedNames[$fragName])){continue;}$collectedNames[$fragName]=true;$fragment=$this->getFragment($fragName);if(!$fragment){continue;}$fragments[]=$fragment;$nodesToVisit[]=$fragment;}}$this->recursivelyReferencedFragments[$operation]=$fragments;}return $fragments;}public function getFragmentSpreads(HasSelectionSet $node){$spreads=$this->fragmentSpreads[$node]??null;if($spreads ===null){$spreads=[];$setsToVisit=[$node->selectionSet];while(!empty($setsToVisit)){$set=array_pop($setsToVisit);for($i=0,$selectionCount=count($set->selections);$i<$selectionCount;$i++){$selection=$set->selections[$i];if($selection->kind ===NodeKind::FRAGMENT_SPREAD){$spreads[]=$selection;}elseif($selection->selectionSet){$setsToVisit[]=$selection->selectionSet;}}}$this->fragmentSpreads[$node]=$spreads;}return $spreads;}public function getFragment($name){$fragments=$this->fragments;if(!$fragments){$fragments=[];foreach($this->getDocument()->definitions as $statement){if($statement->kind !==NodeKind::FRAGMENT_DEFINITION){continue;}$fragments[$statement->name->value]=$statement;}$this->fragments=$fragments;}return $fragments[$name]??null;}public function getDocument(){return $this->ast;}public function getType(){return $this->typeInfo->getType();}public function getParentType(){return $this->typeInfo->getParentType();}public function getInputType(){return $this->typeInfo->getInputType();}public function getParentInputType(){return $this->typeInfo->getParentInputType();}public function getFieldDef(){return $this->typeInfo->getFieldDef();}public function getDirective(){return $this->typeInfo->getDirective();}public function getArgument(){return $this->typeInfo->getArgument();}}