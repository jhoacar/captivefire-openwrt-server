<?php  declare(strict_types=1);namespace GraphQL\Utils;use GraphQL\Error\Error;use GraphQL\Language\AST\DocumentNode;use GraphQL\Language\AST\Node;use GraphQL\Language\AST\NodeKind;use GraphQL\Language\AST\SchemaDefinitionNode;use GraphQL\Language\Parser;use GraphQL\Language\Source;use GraphQL\Type\Definition\Directive;use GraphQL\Type\Schema;use function array_map;use function array_reduce;use function sprintf;class BuildSchema{private $ast;private $nodeMap;private $typeConfigDecorator;private $options;public function __construct(DocumentNode $ast,?callable $typeConfigDecorator=null,array $options=[]){$this->ast=$ast;$this->typeConfigDecorator=$typeConfigDecorator;$this->options=$options;}public static function build($source,?callable $typeConfigDecorator=null,array $options=[]){$doc=$source instanceof DocumentNode?$source:Parser::parse($source);return self::buildAST($doc,$typeConfigDecorator,$options);}public static function buildAST(DocumentNode $ast,?callable $typeConfigDecorator=null,array $options=[]){$builder=new self($ast,$typeConfigDecorator,$options);return $builder->buildSchema();}public function buildSchema(){$schemaDef=null;$typeDefs=[];$this->nodeMap=[];$directiveDefs=[];foreach($this->ast->definitions as $d){switch($d->kind){case  NodeKind::SCHEMA_DEFINITION:if($schemaDef){throw new Error('Must provide only one schema definition.');}$schemaDef=$d;break;case  NodeKind::SCALAR_TYPE_DEFINITION:case  NodeKind::OBJECT_TYPE_DEFINITION:case  NodeKind::INTERFACE_TYPE_DEFINITION:case  NodeKind::ENUM_TYPE_DEFINITION:case  NodeKind::UNION_TYPE_DEFINITION:case  NodeKind::INPUT_OBJECT_TYPE_DEFINITION:$typeName=$d->name->value;if(!empty($this->nodeMap[$typeName])){throw new Error(sprintf('Type "%s" was defined more than once.',$typeName));}$typeDefs[]=$d;$this->nodeMap[$typeName]=$d;break;case  NodeKind::DIRECTIVE_DEFINITION:$directiveDefs[]=$d;break;}}$operationTypes=$schemaDef?$this->getOperationTypes($schemaDef):['query' =>isset($this->nodeMap['Query'])?'Query':null,'mutation' =>isset($this->nodeMap['Mutation'])?'Mutation':null,'subscription' =>isset($this->nodeMap['Subscription'])?'Subscription':null,];$DefinitionBuilder=new ASTDefinitionBuilder($this->nodeMap,$this->options,static function($typeName){throw new Error('Type "'.$typeName.'" not found in document.');},$this->typeConfigDecorator);$directives=array_map(static function($def)use($DefinitionBuilder){return $DefinitionBuilder->buildDirective($def);},$directiveDefs);$skip=array_reduce($directives,static function($hasSkip,$directive){return (bool) $hasSkip ||$directive->name ==='skip';});if(!$skip){$directives[]=Directive::skipDirective();}$include=array_reduce($directives,static function($hasInclude,$directive){return (bool) $hasInclude ||$directive->name ==='include';});if(!$include){$directives[]=Directive::includeDirective();}$deprecated=array_reduce($directives,static function($hasDeprecated,$directive){return (bool) $hasDeprecated ||$directive->name ==='deprecated';});if(!$deprecated){$directives[]=Directive::deprecatedDirective();}return new Schema(['query' =>isset($operationTypes['query'])?$DefinitionBuilder->buildType($operationTypes['query']):null,'mutation' =>isset($operationTypes['mutation'])?$DefinitionBuilder->buildType($operationTypes['mutation']):null,'subscription' =>isset($operationTypes['subscription'])?$DefinitionBuilder->buildType($operationTypes['subscription']):null,'typeLoader' =>static function($name)use($DefinitionBuilder){return $DefinitionBuilder->buildType($name);},'directives' =>$directives,'astNode' =>$schemaDef,'types' =>function()use($DefinitionBuilder){$types=[];foreach($this->nodeMap as $name =>$def){$types[]=$DefinitionBuilder->buildType($def->name->value);}return $types;},]);}private function getOperationTypes($schemaDef){$opTypes=[];foreach($schemaDef->operationTypes as $operationType){$typeName=$operationType->type->name->value;$operation=$operationType->operation;if(isset($opTypes[$operation])){throw new Error(sprintf('Must provide only one %s type in schema.',$operation));}if(!isset($this->nodeMap[$typeName])){throw new Error(sprintf('Specified %s type "%s" not found in document.',$operation,$typeName));}$opTypes[$operation]=$typeName;}return $opTypes;}}