<?php  declare(strict_types=1);namespace GraphQL\Type\Definition;use Exception;use GraphQL\Error\InvariantViolation;use GraphQL\Language\AST\TypeDefinitionNode;use GraphQL\Language\AST\TypeExtensionNode;use GraphQL\Type\Introspection;use GraphQL\Utils\Utils;use JsonSerializable;use ReflectionClass;use Throwable;use function array_keys;use function array_merge;use function implode;use function in_array;use function preg_replace;use function trigger_error;use const E_USER_DEPRECATED;abstract class Type implements JsonSerializable{public const STRING='String';public const INT='Int';public const BOOLEAN='Boolean';public const FLOAT='Float';public const ID='ID';private static $standardTypes;private static $builtInTypes;public $name;public $description;public $astNode;public $config;public $extensionASTNodes;public static function id(){return self::getStandardType(self::ID);}private static function getStandardType($name=null){if(self::$standardTypes ===null){self::$standardTypes=[self::ID =>new IDType(),self::STRING =>new StringType(),self::FLOAT =>new FloatType(),self::INT =>new IntType(),self::BOOLEAN =>new BooleanType(),];}return $name?self::$standardTypes[$name]:self::$standardTypes;}public static function string(){return self::getStandardType(self::STRING);}public static function boolean(){return self::getStandardType(self::BOOLEAN);}public static function int(){return self::getStandardType(self::INT);}public static function float(){return self::getStandardType(self::FLOAT);}public static function listOf($wrappedType){return new ListOfType($wrappedType);}public static function nonNull($wrappedType){return new NonNull($wrappedType);}public static function isBuiltInType(Type $type){return in_array($type->name,array_keys(self::getAllBuiltInTypes()),true);}public static function getAllBuiltInTypes(){if(self::$builtInTypes ===null){self::$builtInTypes=array_merge(Introspection::getTypes(),self::getStandardTypes());}return self::$builtInTypes;}public static function getStandardTypes(){return self::getStandardType();}public static function getInternalTypes(){trigger_error(__METHOD__.' is deprecated. Use Type::getStandardTypes() instead',E_USER_DEPRECATED);return self::getStandardTypes();}public static function overrideStandardTypes(array $types){$standardTypes=self::getStandardTypes();foreach($types as $type){Utils::invariant($type instanceof Type,'Expecting instance of %s, got %s',self::class,Utils::printSafe($type));Utils::invariant(isset($type->name,$standardTypes[$type->name]),'Expecting one of the following names for a standard type: %s, got %s',implode(', ',array_keys($standardTypes)),Utils::printSafe($type->name ??null));$standardTypes[$type->name]=$type;}self::$standardTypes=$standardTypes;}public static function isInputType($type){return $type instanceof InputType &&(!$type instanceof WrappingType ||self::getNamedType($type)instanceof InputType);}public static function getNamedType($type){if($type ===null){return null;}while($type instanceof WrappingType){$type=$type->getWrappedType();}return $type;}public static function isOutputType($type){return $type instanceof OutputType &&(!$type instanceof WrappingType ||self::getNamedType($type)instanceof OutputType);}public static function isLeafType($type){return $type instanceof LeafType;}public static function isCompositeType($type){return $type instanceof CompositeType;}public static function isAbstractType($type){return $type instanceof AbstractType;}public static function assertType($type){Utils::invariant(self::isType($type),'Expected '.Utils::printSafe($type).' to be a GraphQL type.');return $type;}public static function isType($type){return $type instanceof Type;}public static function getNullableType($type){return $type instanceof NonNull?$type->getWrappedType():$type;}public function assertValid(){Utils::assertValidName($this->name);}public function jsonSerialize(){return $this->toString();}public function toString(){return $this->name;}public function __toString(){try{return $this->toString();}catch(Exception $e){echo $e;}catch(Throwable $e){echo $e;}}protected function tryInferName(){if($this->name){return $this->name;}$tmp=new ReflectionClass($this);$name=$tmp->getShortName();if($tmp->getNamespaceName()!==__NAMESPACE__){return preg_replace('~Type$~','',$name);}return null;}}