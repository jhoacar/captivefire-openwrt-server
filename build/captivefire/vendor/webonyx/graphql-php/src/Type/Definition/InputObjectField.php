<?php  declare(strict_types=1);namespace GraphQL\Type\Definition;use GraphQL\Error\Error;use GraphQL\Error\InvariantViolation;use GraphQL\Language\AST\InputValueDefinitionNode;use GraphQL\Utils\Utils;use function sprintf;class InputObjectField{public $name;public $defaultValue;public $description;public $type;public $astNode;public $config;private $defaultValueExists=false;public function __construct(array $opts){foreach($opts as $k =>$v){switch($k){case  'defaultValue':$this->defaultValue=$v;$this->defaultValueExists=true;break;case  'defaultValueExists':break;default:$this->{$k}=$v;}}$this->config=$opts;}public function getType(){return $this->type;}public function defaultValueExists(){return $this->defaultValueExists;}public function assertValid(Type $parentType){try{Utils::assertValidName($this->name);}catch(Error $e){throw new InvariantViolation(sprintf('%s.%s: %s',$parentType->name,$this->name,$e->getMessage()));}$type=$this->type;if($type instanceof WrappingType){$type=$type->getWrappedType(true);}Utils::invariant($type instanceof InputType,sprintf('%s.%s field type must be Input Type but got: %s',$parentType->name,$this->name,Utils::printSafe($this->type)));Utils::invariant(empty($this->config['resolve']),sprintf('%s.%s field type has a resolve property, but Input Types cannot define resolvers.',$parentType->name,$this->name));}}