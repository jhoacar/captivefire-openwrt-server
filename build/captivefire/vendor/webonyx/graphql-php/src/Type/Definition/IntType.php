<?php  declare(strict_types=1);namespace GraphQL\Type\Definition;use Exception;use GraphQL\Error\Error;use GraphQL\Language\AST\IntValueNode;use GraphQL\Language\AST\Node;use GraphQL\Utils\Utils;use function floatval;use function intval;use function is_bool;use function is_numeric;class IntType extends ScalarType{private const MAX_INT=2147483647;private const MIN_INT=-2147483648;public $name=Type::INT;public $description='The `Int` scalar type represents non-fractional signed whole numeric
values. Int can represent values between -(2^31) and 2^31 - 1. ';public function serialize($value){return $this->coerceInt($value);}private function coerceInt($value){if($value ===''){throw new Error('Int cannot represent non 32-bit signed integer value: (empty string)');}$num=floatval($value);if((!is_numeric($value)&&!is_bool($value))||$num>self::MAX_INT ||$num<self::MIN_INT){throw new Error('Int cannot represent non 32-bit signed integer value: '.Utils::printSafe($value));}$int=intval($num);if($int !=$num){throw new Error('Int cannot represent non-integer value: '.Utils::printSafe($value));}return $int;}public function parseValue($value){return $this->coerceInt($value);}public function parseLiteral($valueNode,?array $variables=null){if($valueNode instanceof IntValueNode){$val=(int) $valueNode->value;if($valueNode->value ===(string) $val &&self::MIN_INT <=$val &&$val <=self::MAX_INT){return $val;}}throw new Exception();}}