<?php  namespace Symfony\Component\HttpFoundation\RateLimiter;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\RateLimiter\LimiterInterface;use Symfony\Component\RateLimiter\Policy\NoLimiter;use Symfony\Component\RateLimiter\RateLimit;abstract class AbstractRequestRateLimiter implements RequestRateLimiterInterface{public function consume(Request $request):RateLimit{$limiters=$this->getLimiters($request);if(0===\count($limiters)){$limiters=[new NoLimiter()];}$minimalRateLimit=null;foreach($limiters as $limiter){$rateLimit=$limiter->consume(1);if(null ===$minimalRateLimit ||$rateLimit->getRemainingTokens()<$minimalRateLimit->getRemainingTokens()){$minimalRateLimit=$rateLimit;}}return $minimalRateLimit;}public function reset(Request $request):void{foreach($this->getLimiters($request)as $limiter){$limiter->reset();}}abstract protected function getLimiters(Request $request):array;}