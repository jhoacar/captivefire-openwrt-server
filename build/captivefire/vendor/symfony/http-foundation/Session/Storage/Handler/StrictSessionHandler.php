<?php  namespace Symfony\Component\HttpFoundation\Session\Storage\Handler;class StrictSessionHandler extends AbstractSessionHandler{private $handler;private $doDestroy;public function __construct(\SessionHandlerInterface $handler){if($handler instanceof \SessionUpdateTimestampHandlerInterface){throw new \LogicException(sprintf('"%s" is already an instance of "SessionUpdateTimestampHandlerInterface", you cannot wrap it with "%s".',get_debug_type($handler),self::class));}$this->handler=$handler;}public function open($savePath,$sessionName){parent::open($savePath,$sessionName);return $this->handler->open($savePath,$sessionName);}protected function doRead(string $sessionId){return $this->handler->read($sessionId);}public function updateTimestamp($sessionId,$data){return $this->write($sessionId,$data);}protected function doWrite(string $sessionId,string $data){return $this->handler->write($sessionId,$data);}public function destroy($sessionId){$this->doDestroy=true;$destroyed=parent::destroy($sessionId);return $this->doDestroy?$this->doDestroy($sessionId):$destroyed;}protected function doDestroy(string $sessionId){$this->doDestroy=false;return $this->handler->destroy($sessionId);}public function close(){return $this->handler->close();}public function gc($maxlifetime){return $this->handler->gc($maxlifetime);}}