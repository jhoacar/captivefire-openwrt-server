<?php  namespace Symfony\Component\HttpFoundation\Session\Storage\Handler;use Predis\Response\ErrorInterface;use Symfony\Component\Cache\Traits\RedisClusterProxy;use Symfony\Component\Cache\Traits\RedisProxy;class RedisSessionHandler extends AbstractSessionHandler{private $redis;private $prefix;private $ttl;public function __construct($redis,array $options=[]){if(!$redis instanceof \Redis &&!$redis instanceof \RedisArray &&!$redis instanceof \RedisCluster &&!$redis instanceof \Predis\ClientInterface &&!$redis instanceof RedisProxy &&!$redis instanceof RedisClusterProxy){throw new \InvalidArgumentException(sprintf('"%s()" expects parameter 1 to be Redis, RedisArray, RedisCluster or Predis\ClientInterface, "%s" given.',__METHOD__,get_debug_type($redis)));}if($diff=array_diff(array_keys($options),['prefix','ttl'])){throw new \InvalidArgumentException(sprintf('The following options are not supported "%s".',implode(', ',$diff)));}$this->redis=$redis;$this->prefix=$options['prefix']??'sf_s';$this->ttl=$options['ttl']??null;}protected function doRead(string $sessionId):string{return $this->redis->get($this->prefix.$sessionId)?:'';}protected function doWrite(string $sessionId,string $data):bool{$result=$this->redis->setEx($this->prefix.$sessionId,(int)($this->ttl ??\ini_get('session.gc_maxlifetime')),$data);return $result &&!$result instanceof ErrorInterface;}protected function doDestroy(string $sessionId):bool{static $unlink=true;if($unlink){try{$unlink=false !==$this->redis->unlink($this->prefix.$sessionId);}catch(\Throwable $e){$unlink=false;}}if(!$unlink){$this->redis->del($this->prefix.$sessionId);}return true;}public function close():bool{return true;}public function gc($maxlifetime){return 0;}public function updateTimestamp($sessionId,$data){return (bool) $this->redis->expire($this->prefix.$sessionId,(int)($this->ttl ??\ini_get('session.gc_maxlifetime')));}}