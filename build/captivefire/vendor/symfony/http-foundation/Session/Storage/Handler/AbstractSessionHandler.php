<?php  namespace Symfony\Component\HttpFoundation\Session\Storage\Handler;use Symfony\Component\HttpFoundation\Session\SessionUtils;abstract class AbstractSessionHandler implements \SessionHandlerInterface,\SessionUpdateTimestampHandlerInterface{private $sessionName;private $prefetchId;private $prefetchData;private $newSessionId;private $igbinaryEmptyData;public function open($savePath,$sessionName){$this->sessionName=$sessionName;if(!headers_sent()&&!\ini_get('session.cache_limiter')&&'0'!==\ini_get('session.cache_limiter')){header(sprintf('Cache-Control: max-age=%d, private, must-revalidate',60*(int) \ini_get('session.cache_expire')));}return true;}abstract protected function doRead(string $sessionId);abstract protected function doWrite(string $sessionId,string $data);abstract protected function doDestroy(string $sessionId);public function validateId($sessionId){$this->prefetchData=$this->read($sessionId);$this->prefetchId=$sessionId;if(\PHP_VERSION_ID<70317||(70400<=\PHP_VERSION_ID &&\PHP_VERSION_ID<70405)){foreach(debug_backtrace(\DEBUG_BACKTRACE_IGNORE_ARGS)as $frame){if(!isset($frame['class'])&&isset($frame['function'])&&\in_array($frame['function'],['session_regenerate_id','session_create_id'],true)){return ''===$this->prefetchData;}}}return ''!==$this->prefetchData;}public function read($sessionId){if(null !==$this->prefetchId){$prefetchId=$this->prefetchId;$prefetchData=$this->prefetchData;$this->prefetchId=$this->prefetchData=null;if($prefetchId ===$sessionId ||''===$prefetchData){$this->newSessionId=''===$prefetchData?$sessionId:null;return $prefetchData;}}$data=$this->doRead($sessionId);$this->newSessionId=''===$data?$sessionId:null;return $data;}public function write($sessionId,$data){if(null ===$this->igbinaryEmptyData){$this->igbinaryEmptyData=\function_exists('igbinary_serialize')?igbinary_serialize([]):'';}if(''===$data ||$this->igbinaryEmptyData ===$data){return $this->destroy($sessionId);}$this->newSessionId=null;return $this->doWrite($sessionId,$data);}public function destroy($sessionId){if(!headers_sent()&&filter_var(\ini_get('session.use_cookies'),\FILTER_VALIDATE_BOOLEAN)){if(!$this->sessionName){throw new \LogicException(sprintf('Session name cannot be empty, did you forget to call "parent::open()" in "%s"?.',static::class));}$cookie=SessionUtils::popSessionCookie($this->sessionName,$sessionId);if(null ===$cookie ||isset($_COOKIE[$this->sessionName])){if(\PHP_VERSION_ID<70300){setcookie($this->sessionName,'',0,\ini_get('session.cookie_path'),\ini_get('session.cookie_domain'),filter_var(\ini_get('session.cookie_secure'),\FILTER_VALIDATE_BOOLEAN),filter_var(\ini_get('session.cookie_httponly'),\FILTER_VALIDATE_BOOLEAN));}else{$params=session_get_cookie_params();unset($params['lifetime']);setcookie($this->sessionName,'',$params);}}}return $this->newSessionId ===$sessionId ||$this->doDestroy($sessionId);}}