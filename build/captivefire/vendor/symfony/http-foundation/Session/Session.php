<?php  namespace Symfony\Component\HttpFoundation\Session;use Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag;use Symfony\Component\HttpFoundation\Session\Attribute\AttributeBagInterface;use Symfony\Component\HttpFoundation\Session\Flash\FlashBag;use Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface;use Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage;use Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface;class_exists(AttributeBag::class);class_exists(FlashBag::class);class_exists(SessionBagProxy::class);class Session implements SessionInterface,\IteratorAggregate,\Countable{protected $storage;private $flashName;private $attributeName;private $data=[];private $usageIndex=0;private $usageReporter;public function __construct(SessionStorageInterface $storage=null,AttributeBagInterface $attributes=null,FlashBagInterface $flashes=null,callable $usageReporter=null){$this->storage=$storage ??new NativeSessionStorage();$this->usageReporter=$usageReporter;$attributes=$attributes ??new AttributeBag();$this->attributeName=$attributes->getName();$this->registerBag($attributes);$flashes=$flashes ??new FlashBag();$this->flashName=$flashes->getName();$this->registerBag($flashes);}public function start(){return $this->storage->start();}public function has(string $name){return $this->getAttributeBag()->has($name);}public function get(string $name,$default=null){return $this->getAttributeBag()->get($name,$default);}public function set(string $name,$value){$this->getAttributeBag()->set($name,$value);}public function all(){return $this->getAttributeBag()->all();}public function replace(array $attributes){$this->getAttributeBag()->replace($attributes);}public function remove(string $name){return $this->getAttributeBag()->remove($name);}public function clear(){$this->getAttributeBag()->clear();}public function isStarted(){return $this->storage->isStarted();}public function getIterator(){return new \ArrayIterator($this->getAttributeBag()->all());}public function count(){return \count($this->getAttributeBag()->all());}public function&getUsageIndex():int{return $this->usageIndex;}public function isEmpty():bool{if($this->isStarted()){++$this->usageIndex;if($this->usageReporter &&0<=$this->usageIndex){($this->usageReporter)();}}foreach($this->data as&$data){if(!empty($data)){return false;}}return true;}public function invalidate(int $lifetime=null){$this->storage->clear();return $this->migrate(true,$lifetime);}public function migrate(bool $destroy=false,int $lifetime=null){return $this->storage->regenerate($destroy,$lifetime);}public function save(){$this->storage->save();}public function getId(){return $this->storage->getId();}public function setId(string $id){if($this->storage->getId()!==$id){$this->storage->setId($id);}}public function getName(){return $this->storage->getName();}public function setName(string $name){$this->storage->setName($name);}public function getMetadataBag(){++$this->usageIndex;if($this->usageReporter &&0<=$this->usageIndex){($this->usageReporter)();}return $this->storage->getMetadataBag();}public function registerBag(SessionBagInterface $bag){$this->storage->registerBag(new SessionBagProxy($bag,$this->data,$this->usageIndex,$this->usageReporter));}public function getBag(string $name){$bag=$this->storage->getBag($name);return method_exists($bag,'getBag')?$bag->getBag():$bag;}public function getFlashBag(){return $this->getBag($this->flashName);}private function getAttributeBag():AttributeBagInterface{return $this->getBag($this->attributeName);}}