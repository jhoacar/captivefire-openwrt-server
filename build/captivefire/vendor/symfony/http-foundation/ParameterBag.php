<?php  namespace Symfony\Component\HttpFoundation;use Symfony\Component\HttpFoundation\Exception\BadRequestException;class ParameterBag implements \IteratorAggregate,\Countable{protected $parameters;public function __construct(array $parameters=[]){$this->parameters=$parameters;}public function all(string $key=null):array{if(null ===$key){return $this->parameters;}if(!\is_array($value=$this->parameters[$key]??[])){throw new BadRequestException(sprintf('Unexpected value for parameter "%s": expecting "array", got "%s".',$key,get_debug_type($value)));}return $value;}public function keys():array{return array_keys($this->parameters);}public function replace(array $parameters=[]){$this->parameters=$parameters;}public function add(array $parameters=[]){$this->parameters=array_replace($this->parameters,$parameters);}public function get(string $key,mixed $default=null):mixed{return \array_key_exists($key,$this->parameters)?$this->parameters[$key]:$default;}public function set(string $key,mixed $value){$this->parameters[$key]=$value;}public function has(string $key):bool{return \array_key_exists($key,$this->parameters);}public function remove(string $key){unset($this->parameters[$key]);}public function getAlpha(string $key,string $default=''):string{return preg_replace('/[^[:alpha:]]/','',$this->get($key,$default));}public function getAlnum(string $key,string $default=''):string{return preg_replace('/[^[:alnum:]]/','',$this->get($key,$default));}public function getDigits(string $key,string $default=''):string{return str_replace(['-','+'],'',$this->filter($key,$default,\FILTER_SANITIZE_NUMBER_INT));}public function getInt(string $key,int $default=0):int{return (int) $this->get($key,$default);}public function getBoolean(string $key,bool $default=false):bool{return $this->filter($key,$default,\FILTER_VALIDATE_BOOLEAN);}public function filter(string $key,mixed $default=null,int $filter=\FILTER_DEFAULT,mixed $options=[]):mixed{$value=$this->get($key,$default);if(!\is_array($options)&&$options){$options=['flags' =>$options];}if(\is_array($value)&&!isset($options['flags'])){$options['flags']=\FILTER_REQUIRE_ARRAY;}if((\FILTER_CALLBACK&$filter)&&!(($options['options']??null)instanceof \Closure)){throw new \InvalidArgumentException(sprintf('A Closure must be passed to "%s()" when FILTER_CALLBACK is used, "%s" given.',__METHOD__,get_debug_type($options['options']??null)));}return filter_var($value,$filter,$options);}public function getIterator():\ArrayIterator{return new \ArrayIterator($this->parameters);}public function count():int{return \count($this->parameters);}}