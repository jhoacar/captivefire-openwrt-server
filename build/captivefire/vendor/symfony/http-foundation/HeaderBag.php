<?php  namespace Symfony\Component\HttpFoundation;class HeaderBag implements \IteratorAggregate,\Countable{protected const UPPER='_ABCDEFGHIJKLMNOPQRSTUVWXYZ';protected const LOWER='-abcdefghijklmnopqrstuvwxyz';protected $headers=[];protected $cacheControl=[];public function __construct(array $headers=[]){foreach($headers as $key =>$values){$this->set($key,$values);}}public function __toString():string{if(!$headers=$this->all()){return '';}ksort($headers);$max=max(array_map('strlen',array_keys($headers)))+1;$content='';foreach($headers as $name =>$values){$name=ucwords($name,'-');foreach($values as $value){$content .=sprintf("%-{$max}s %s\r\n",$name.':',$value);}}return $content;}public function all(string $key=null):array{if(null !==$key){return $this->headers[strtr($key,self::UPPER,self::LOWER)]??[];}return $this->headers;}public function keys():array{return array_keys($this->all());}public function replace(array $headers=[]){$this->headers=[];$this->add($headers);}public function add(array $headers){foreach($headers as $key =>$values){$this->set($key,$values);}}public function get(string $key,string $default=null):?string{$headers=$this->all($key);if(!$headers){return $default;}if(null ===$headers[0]){return null;}return (string) $headers[0];}public function set(string $key,string|array|null $values,bool $replace=true){$key=strtr($key,self::UPPER,self::LOWER);if(\is_array($values)){$values=array_values($values);if(true ===$replace ||!isset($this->headers[$key])){$this->headers[$key]=$values;}else{$this->headers[$key]=array_merge($this->headers[$key],$values);}}else{if(true ===$replace ||!isset($this->headers[$key])){$this->headers[$key]=[$values];}else{$this->headers[$key][]=$values;}}if('cache-control' ===$key){$this->cacheControl=$this->parseCacheControl(implode(', ',$this->headers[$key]));}}public function has(string $key):bool{return \array_key_exists(strtr($key,self::UPPER,self::LOWER),$this->all());}public function contains(string $key,string $value):bool{return \in_array($value,$this->all($key));}public function remove(string $key){$key=strtr($key,self::UPPER,self::LOWER);unset($this->headers[$key]);if('cache-control' ===$key){$this->cacheControl=[];}}public function getDate(string $key,\DateTime $default=null):?\DateTimeInterface{if(null ===$value=$this->get($key)){return $default;}if(false ===$date=\DateTime::createFromFormat(\DATE_RFC2822,$value)){throw new \RuntimeException(sprintf('The "%s" HTTP header is not parseable (%s).',$key,$value));}return $date;}public function addCacheControlDirective(string $key,bool|string $value=true){$this->cacheControl[$key]=$value;$this->set('Cache-Control',$this->getCacheControlHeader());}public function hasCacheControlDirective(string $key):bool{return \array_key_exists($key,$this->cacheControl);}public function getCacheControlDirective(string $key):bool|string|null{return $this->cacheControl[$key]??null;}public function removeCacheControlDirective(string $key){unset($this->cacheControl[$key]);$this->set('Cache-Control',$this->getCacheControlHeader());}public function getIterator():\ArrayIterator{return new \ArrayIterator($this->headers);}public function count():int{return \count($this->headers);}protected function getCacheControlHeader(){ksort($this->cacheControl);return HeaderUtils::toString($this->cacheControl,',');}protected function parseCacheControl(string $header):array{$parts=HeaderUtils::split($header,',=');return HeaderUtils::combine($parts);}}