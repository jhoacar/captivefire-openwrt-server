<?php  namespace Symfony\Component\HttpFoundation;use Symfony\Component\HttpFoundation\File\UploadedFile;class FileBag extends ParameterBag{private const FILE_KEYS=['error','name','size','tmp_name','type'];public function __construct(array $parameters=[]){$this->replace($parameters);}public function replace(array $files=[]){$this->parameters=[];$this->add($files);}public function set(string $key,mixed $value){if(!\is_array($value)&&!$value instanceof UploadedFile){throw new \InvalidArgumentException('An uploaded file must be an array or an instance of UploadedFile.');}parent::set($key,$this->convertFileInformation($value));}public function add(array $files=[]){foreach($files as $key =>$file){$this->set($key,$file);}}protected function convertFileInformation(array|UploadedFile $file):array|UploadedFile|null{if($file instanceof UploadedFile){return $file;}$file=$this->fixPhpFilesArray($file);$keys=array_keys($file);sort($keys);if(self::FILE_KEYS ==$keys){if(\UPLOAD_ERR_NO_FILE ==$file['error']){$file=null;}else{$file=new UploadedFile($file['tmp_name'],$file['name'],$file['type'],$file['error'],false);}}else{$file=array_map(function($v){return $v instanceof UploadedFile ||\is_array($v)?$this->convertFileInformation($v):$v;},$file);if(array_keys($keys)===$keys){$file=array_filter($file);}}return $file;}protected function fixPhpFilesArray(array $data):array{unset($data['full_path']);$keys=array_keys($data);sort($keys);if(self::FILE_KEYS !=$keys ||!isset($data['name'])||!\is_array($data['name'])){return $data;}$files=$data;foreach(self::FILE_KEYS as $k){unset($files[$k]);}foreach($data['name']as $key =>$name){$files[$key]=$this->fixPhpFilesArray(['error' =>$data['error'][$key],'name' =>$name,'type' =>$data['type'][$key],'tmp_name' =>$data['tmp_name'][$key],'size' =>$data['size'][$key],]);}return $files;}}