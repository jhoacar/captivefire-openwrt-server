<?php  declare(strict_types=1);namespace UciGraphQL;use UciGraphQL\Utils\ClassFinder;trait Loader{private static $method='getFields';private static $cleanMethod='clean';private static $interface=ILoader::class;private $uciFields=[];private $classes=[];protected static $namespace=__NAMESPACE__;private static function isCorrectClass($class):bool{$implementations=class_implements($class);if(!$implementations){$implementations=[];}return in_array(self::$interface,$implementations,true)&&method_exists($class,self::$method);}private function getResultClass($class):array{$callable=[$class,self::$method];if(is_callable($callable)){return (array) call_user_func($callable);}return[];}private function searchFields():void{$classes=ClassFinder::getClassesInNamespace(__DIR__.'/../',self::$namespace);foreach($classes as $class){if(self::isCorrectClass($class)){$result=$this->getResultClass($class);foreach($result as $key =>$value){$this->uciFields[$key]=$value;$this->classes[$key]=$class;}}}}private static function cleanFields():void{$classes=ClassFinder::getClassesInNamespace(__DIR__.'/../',self::$namespace);foreach($classes as $class){if(self::isCorrectClass($class)){self::cleanField($class);}}}private static function cleanField($class):void{$callable=[$class,self::$cleanMethod];if(is_callable($callable)){call_user_func($callable);}}}