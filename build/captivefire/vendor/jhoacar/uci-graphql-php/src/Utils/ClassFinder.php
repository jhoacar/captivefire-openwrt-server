<?php  declare(strict_types=1);namespace UciGraphQL\Utils;use Throwable;class ClassFinder{public static function getClassesInNamespace($composerDir,$namespace,$autoloaderSection='autoload',$psr='psr-4'):array{if(substr($composerDir,strlen($composerDir)-1)!=='/'){$composerDir .='/';}$directory=self::getNamespaceDirectory($composerDir,$namespace,$autoloaderSection,$psr);if(!strlen($directory)){return[];}$files=self::listAllFiles($directory);$classes=[];foreach($files as $file){if(str_contains($file,'.php')){$className=self::getClassName($namespace,$file);array_push($classes,$className);}}return array_filter($classes,function($possibleClass){return class_exists($possibleClass);});}private static function getClassName($namespace,$fileName):string{return $namespace.'\\'.str_replace('.php','',str_replace('/','\\',$fileName));}private static function getDefinedNamespaces($composerDir,$autoloaderSection,$psr):array{$composerJsonPath=$composerDir.'composer.json';$fileContent=file_get_contents($composerJsonPath);if($fileContent ===false){$fileContent='';}$composerConfig=(object) json_decode($fileContent);if(property_exists($composerConfig,$autoloaderSection)){if(property_exists($composerConfig->$autoloaderSection,$psr)){return (array) $composerConfig->$autoloaderSection->$psr;}return[];}return[];}private static function getNamespaceDirectory($composerDir,$namespace,$autoloaderSection,$psr):string{$composerNamespaces=self::getDefinedNamespaces($composerDir,$autoloaderSection,$psr);$namespaceFragments=explode('\\',$namespace);$undefinedNamespaceFragments=[];while($namespaceFragments){$possibleNamespace=implode('\\',$namespaceFragments).'\\';if(array_key_exists($possibleNamespace,$composerNamespaces)){$realpath=realpath($composerDir.$composerNamespaces[$possibleNamespace].implode('/',$undefinedNamespaceFragments));if(!$realpath){return '';}return $realpath;}array_unshift($undefinedNamespaceFragments,array_pop($namespaceFragments));}return '';}private static function listAllFiles($directory,$prefix=''):array{$scandir=scandir($directory);if(!$scandir){$scandir=[];}$array=array_diff($scandir,['.','..']);foreach($array as&$item){$item=$prefix.$item;}unset($item);foreach($array as $item){if(is_dir($directory.DIRECTORY_SEPARATOR.$item)){$array=array_merge($array,self::listAllFiles($directory.DIRECTORY_SEPARATOR.$item,$item.DIRECTORY_SEPARATOR));}}return $array;}}