<?php  declare(strict_types=1);namespace UciGraphQL\Mutations;use GraphQL\Type\Definition\ObjectType;use GraphQL\Type\Definition\ResolveInfo;use UciGraphQL\Loader;use UciGraphQL\Mutations\Uci\UciMutation;use UciGraphQL\Utils\ArrayMerge;class MutationType extends ObjectType{use Loader;private static $mutation=null;public static function mutation($customFields=[]):self{return self::$mutation ===null?(self::$mutation=new self($customFields)):self::$mutation;}public static function clean():void{UciMutation::clean();self::$mutation=null;}private function __construct($customFields=[]){self::$namespace=__NAMESPACE__;$this->searchFields();$config=['name' =>'Mutation','fields' =>ArrayMerge::merge_arrays(UciMutation::getFields(),$customFields),'resolveField' =>function($value,$args,$context,ResolveInfo $info){$method='resolve'.ucfirst($info->fieldName);if(method_exists($this,$method)){return $this->{$method}($value,$args,$context,$info);}else{return '';}},];parent::__construct($config);}}